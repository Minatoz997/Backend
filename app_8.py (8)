import os
import gradio as gr
import requests
import base64
from io import BytesIO
from PIL import Image
from datetime import datetime
import sqlite3
from google_auth_oauthlib.flow import Flow
from google.auth.transport.requests import Request as GoogleRequest
from fastapi import FastAPI, Request
from fastapi.responses import RedirectResponse
import json
import logging
import sys
import time

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Setup FastAPI app
app = FastAPI()

# Setup OAuth dengan error handling
try:
    CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
    CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")
    REDIRECT_URI = os.getenv("GOOGLE_REDIRECT_URI", "https://backend-cb98.onrender.com/auth/callback")
    SCOPES = ["profile", "email"]

    logger.info(f"GOOGLE_CLIENT_ID: {'[Value Hidden]' if CLIENT_ID else 'Not found'}")
    logger.info(f"GOOGLE_CLIENT_SECRET: {'[Value Hidden]' if CLIENT_SECRET else 'Not found'}")
    logger.info(f"GOOGLE_REDIRECT_URI: {REDIRECT_URI}")

    if not CLIENT_ID or not CLIENT_SECRET:
        logger.error("GOOGLE_CLIENT_ID or GOOGLE_CLIENT_SECRET not set in environment variables.")
        raise ValueError("GOOGLE_CLIENT_ID or GOOGLE_CLIENT_SECRET not set in environment variables.")

    client_config = {
        "web": {
            "client_id": CLIENT_ID,
            "project_id": "YOUR_PROJECT_ID",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_secret": CLIENT_SECRET,
            "redirect_uris": [REDIRECT_URI]
        }
    }
except Exception as e:
    logger.error(f"Failed to initialize OAuth configuration: {str(e)}")
    raise

ADMIN_USERS = ["admin@kugy.ai", "testadmin"]

def init_db():
    conn = sqlite3.connect("credits.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                    user_id TEXT PRIMARY KEY,
                    user_name TEXT,
                    credits INTEGER,
                    login_streak INTEGER,
                    last_login TEXT,
                    last_guest_timestamp INTEGER,
                    last_reward_date TEXT
                 )''')
    conn.commit()
    conn.close()

init_db()

def check_credits(user_id, required_credits):
    if not user_id:
        return False
    if user_id in ADMIN_USERS:
        logger.info(f"Admin user {user_id}: bypassing credit check")
        return True
    conn = sqlite3.connect("credits.db")
    c = conn.cursor()
    c.execute("SELECT credits FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    if not result or result[0] < required_credits:
        return False
    conn = sqlite3.connect("credits.db")
    c = conn.cursor()
    c.execute("UPDATE users SET credits = credits - ? WHERE user_id = ?", (required_credits, user_id))
    conn.commit()
    conn.close()
    return True

def get_credits(user_id):
    if not user_id:
        return "0 (Invalid User)"
    if user_id in ADMIN_USERS:
        return "âˆž (Admin)"
    conn = sqlite3.connect("credits.db")
    c = conn.cursor()
    c.execute("SELECT credits FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return str(result[0]) if result else "0"

def top_up_credits(user_id, user_name, amount):
    if not user_id or user_id.startswith("guest_"):
        return "Kugy.ai: Guests can't top up. Please register/login."
    if user_id in ADMIN_USERS:
        return "Kugy.ai: Admin has unlimited credits! ðŸ˜Ž"
    conn = sqlite3.connect("credits.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, user_name, credits, login_streak, last_login, last_guest_timestamp, last_reward_date) VALUES (?, ?, ?, ?, ?, ?, ?)",
              (user_id, user_name, 0, 0, datetime.now().strftime("%Y-%m-%d"), 0, ''))
    c.execute("UPDATE users SET credits = credits + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    conn.close()
    return f"Kugy.ai: Added {amount} credits! Total: {get_credits(user_id)} ðŸ’°"

def check_login_streak(user_id, user_name):
    if not user_id or user_id.startswith("guest_"):
        return "Login/register for daily bonuses!"
    conn = sqlite3.connect("credits.db")
    c = conn.cursor()
    today = datetime.now().strftime("%Y-%m-%d")
    c.execute("SELECT login_streak, last_login, last_reward_date FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    bonus_message = ""
    if not result:
        initial_credits = 10
        c.execute("INSERT INTO users (user_id, user_name, credits, login_streak, last_login, last_guest_timestamp, last_reward_date) VALUES (?, ?, ?, ?, ?, ?, ?)",
                  (user_id, user_name, initial_credits, 1, today, 0, today))
        conn.commit()
        bonus_message = f"Welcome, {user_name}! Got {initial_credits} free credits! ðŸ˜¸"
    else:
        streak, last_login, last_reward_date = result
        if last_reward_date == today:
            bonus_message = f"Streak: {streak} days. Daily bonus already claimed today."
        else:
            if (datetime.now() - datetime.strptime(last_login, "%Y-%m-%d")).days == 1:
                streak += 1
            else:
                streak = 1
            daily_bonus = 1
            streak_bonus = 2 if streak % 5 == 0 else 0
            total_bonus = daily_bonus + streak_bonus
            c.execute("UPDATE users SET credits = credits + ?, login_streak = ?, last_login = ?, last_reward_date = ? WHERE user_id = ?",
                      (total_bonus, streak, today, today, user_id))
            conn.commit()
            bonus_message = f"Daily login! Got {daily_bonus} credit. "
            if streak_bonus:
                bonus_message += f"Streak {streak} days! Bonus {streak_bonus} credits! ðŸŽ‰ Total: {get_credits(user_id)} ðŸ’°"
            else:
                bonus_message += f"Streak: {streak} days. Total: {get_credits(user_id)} ðŸ’°"
    conn.close()
    return bonus_message

STABILITY_API_URL = "https://api.stability.ai/v1/generation/stable-diffusion-v1-5/text-to-image"  # Ganti ke SD free
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"

# Ambil API keys dari environment
try:
    API_KEYS = {
        "stability": os.getenv("STABILITY_API_KEY"),
        "openrouter": os.getenv("OPENROUTER_API_KEY")
    }
except Exception as e:
    logger.error(f"Failed to read API keys from environment: {str(e)}")
    API_KEYS = {"stability": None, "openrouter": None}

# Tes langsung apakah os.getenv() bekerja
logger.info("Testing os.getenv() directly:")
logger.info(f"STABILITY_API_KEY (raw): {'[Value Hidden]' if os.getenv('STABILITY_API_KEY') else 'Not found'}")
logger.info(f"OPENROUTER_API_KEY (raw): {'[Value Hidden]' if os.getenv('OPENROUTER_API_KEY') else 'Not found'}")

# Logging semua environment variables untuk debug
logger.info("All Environment Variables:")
for key, value in os.environ.items():
    if "API_KEY" in key:
        logger.info(f"{key}: {'[Value Hidden]' if value else 'Not set'}")

# Validasi API keys
missing_keys = [k for k, v in API_KEYS.items() if not v]
if missing_keys:
    logger.warning(f"Missing API keys: {', '.join(missing_keys)}")

# Validasi API keys dengan test request
def validate_api_keys():
    stability_status = "Not set"
    openrouter_status = "Not set"

    # Test Stability API
    if API_KEYS["stability"]:
        headers = {"Authorization": f"Bearer {API_KEYS['stability']}", "Content-Type": "application/json"}
        payload = {"text_prompts": [{"text": "test"}], "cfg_scale": 7, "height": 512, "width": 512, "samples": 1, "steps": 10}
        try:
            response = requests.post(STABILITY_API_URL, headers=headers, json=payload, timeout=5)
            stability_status = f"Status {response.status_code}: {'Valid' if response.status_code == 200 else response.text[:100]}"
        except Exception as e:
            stability_status = f"Error: {str(e)[:100]}"

    # Test OpenRouter API
    if API_KEYS["openrouter"]:
        headers = {"Authorization": f"Bearer {API_KEYS['openrouter']}", "Content-Type": "application/json", "HTTP-Referer": "http://localhost", "X-Title": "KugyAI"}
        payload = {"model": "x-ai/grok-3-mini-beta", "messages": [{"role": "user", "content": "test"}], "temperature": 0.7}  # Ganti ke grok-3-mini-beta
        try:
            response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=5)
            openrouter_status = f"Status {response.status_code}: {'Valid' if response.status_code == 200 else response.text[:100]}"
        except Exception as e:
            openrouter_status = f"Error: {str(e)[:100]}"

    logger.info(f"STABILITY_API_KEY: {stability_status}")
    logger.info(f"OPENROUTER_API_KEY: {openrouter_status}")
    return stability_status, openrouter_status

try:
    stability_status, openrouter_status = validate_api_keys()
except Exception as e:
    logger.error(f"Failed to validate API keys: {str(e)}")
    stability_status, openrouter_status = "Error", "Error"

MAX_CACHE_SIZE = 10
image_cache = {}

def generate_image(prompt, user_id):
    if not check_credits(user_id, 3):
        return None, "Kugy.ai: Not enough credits (need 3)! Top up now~ ðŸ’°"
    cache_key = prompt.lower().strip()
    if cache_key in image_cache:
        return image_cache[cache_key], "Kugy.ai: Cached image for you! ðŸ˜˜"
    
    if not API_KEYS["stability"]:
        logger.error("Stability API Key is missing or not set in environment!")
        return None, "Kugy.ai: Stability API Key missing! Set STABILITY_API_KEY in environment."
    
    headers = {"Authorization": f"Bearer {API_KEYS['stability']}", "Content-Type": "application/json", "Accept": "application/json"}
    payload = {"text_prompts": [{"text": prompt}], "cfg_scale": 7, "height": 512, "width": 512, "samples": 1, "steps": 30}
    try:
        logger.info(f"Calling Stability API with prompt: {prompt}")
        response = requests.post(STABILITY_API_URL, headers=headers, json=payload, timeout=30)
        logger.info(f"Stability API response status: {response.status_code}")
        if response.status_code == 200:
            resp_data = response.json()
            if "artifacts" in resp_data and resp_data["artifacts"]:
                base64_img = resp_data["artifacts"][0]["base64"]
                image = Image.open(BytesIO(base64.b64decode(base64_img))).resize((512, 512), Image.Resampling.LANCZOS)
                if len(image_cache) >= MAX_CACHE_SIZE:
                    image_cache.pop(next(iter(image_cache)))
                image_cache[cache_key] = image
                return image, "Kugy.ai: Here's your cute image! ðŸ˜º"
            return None, "Kugy.ai: Failed to get image from Stability (no artifacts)!"
        elif response.status_code == 401:
            return None, "Kugy.ai: Stability API error (401 Unauthorized). Check API Key!"
        else:
            error_detail = response.text
            try:
                error_json = response.json()
                error_detail = error_json.get('message', error_detail)
            except json.JSONDecodeError:
                pass
            logger.error(f"Stability API error: {error_detail}")
            return None, f"Kugy.ai: Stability API error (status {response.status_code}): {error_detail[:200]}"
    except requests.exceptions.RequestException as e:
        logger.error(f"Stability API request failed: {str(e)}")
        return None, f"Kugy.ai: Failed to connect to Stability API: {str(e)}"
    except Exception as e:
        logger.error(f"Unexpected error with Stability API: {str(e)}")
        return None, f"Kugy.ai: Unexpected error with Stability API: {str(e)}"

def chat_with_openrouter(message, history, user_id, model_select):
    if not check_credits(user_id, 1):
        return history + [("Kugy.ai: Not enough credits (need 1)! Top up! ðŸ’°", None)]
    
    if not API_KEYS["openrouter"]:
        logger.error("OpenRouter API Key is missing or not set in environment!")
        return history + [("Kugy.ai: OpenRouter API Key missing! Set OPENROUTER_API_KEY in environment.", None)]
    
    headers = {
        "Authorization": f"Bearer {API_KEYS['openrouter']}",
        "Content-Type": "application/json",
        "HTTP-Referer": "http://localhost",
        "X-Title": "KugyAI"
    }
    model_map = {
        "OpenRouter (Grok 3 Mini Beta)": "x-ai/grok-3-mini-beta",  # Ganti ke grok-3-mini-beta
        "OpenRouter (Gemini 2.0 Flash)": "google/gemini-flash-1.5"
    }
    model_id = model_map.get(model_select, "x-ai/grok-3-mini-beta")  # Default ke grok-3-mini-beta
    logger.info(f"Calling OpenRouter with model: {model_id}")
    messages = [{"role": "user", "content": message}]
    payload = {"model": model_id, "messages": messages, "temperature": 0.7}
    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=30)
        logger.info(f"OpenRouter response status: {response.status_code}")
        if response.status_code != 200:
            error_msg = response.text[:200]
            logger.error(f"OpenRouter error: {error_msg}")
            return history + [(f"Kugy.ai: OpenRouter API error (status {response.status_code}): {error_msg}", None)]
        reply = response.json()["choices"][0]["message"]["content"]
        return history + [(f"ðŸ¤– {reply}", None)]
    except requests.exceptions.RequestException as e:
        logger.error(f"OpenRouter request failed: {str(e)}")
        return history + [(f"Kugy.ai: Failed to connect to OpenRouter: {str(e)}", None)]
    except json.JSONDecodeError as e:
        logger.error(f"OpenRouter response decode error: {str(e)}")
        return history + [(f"Kugy.ai: OpenRouter response error: {str(e)}", None)]
    except Exception as e:
        logger.error(f"Unexpected error with OpenRouter: {str(e)}")
        return history + [(f"Kugy.ai: Unexpected error with OpenRouter: {str(e)}", None)]

def handle_google_callback(code, state):
    if not code or not state:
        return None, None, "Error: Missing code or state in callback.", gr.update(selected="Chat")
    if state != "xyz":
        return None, None, "Error: Invalid state parameter. Possible CSRF attack.", gr.update(selected="Welcome")
    try:
        flow = Flow.from_client_config(client_config, scopes=SCOPES, redirect_uri=REDIRECT_URI)
        flow.fetch_token(code=code)
        credentials = flow.credentials
        credentials.refresh(GoogleRequest())
        user_info = requests.get("https://www.googleapis.com/userinfo/v2/me", headers={"Authorization": f"Bearer {credentials.token}"}).json()
        user_id = user_info["email"]
        user_name = user_info.get("name", user_id.split("@")[0])
        logger.info(f"User logged in: {user_id}")
        return user_id, user_name, "Login successful! Redirecting to Chat...", gr.update(selected="Chat")
    except Exception as e:
        logger.error(f"Error in Google callback: {str(e)}")
        return None, None, f"Error during login: {str(e)}", gr.update(selected="Welcome")

@app.get('/auth/callback')
async def oauth_callback(code: str | None = None, state: str | None = None):
    gradio_base_url = "https://backend-cb98.onrender.com/"
    if code and state:
        redirect_url = f"{gradio_base_url}?code={code}&state={state}"
        return RedirectResponse(url=redirect_url)
    return RedirectResponse(url=f"{gradio_base_url}?error=missing_params")

def create_gradio_interface():
    with gr.Blocks(
        css="""
        #title { font-size: 30px; font-weight: bold; color: #4A90E2; text-align: center; }
        .credit-display { background: linear-gradient(to right, #FFD700, #FFA500); color: black; padding: 8px 12px; border-radius: 15px; text-align: center; font-weight: bold; }
        .oauth-link { display: inline-block; background-color: #4285F4; color: white; padding: 10px 20px; border-radius: 5px; text-decoration: none; font-weight: bold; }
        .oauth-link:hover { background-color: #3267D6; }
        """,
        theme="soft",
    ) as demo:
        gr.HTML("<div id='title'>kugy.ai â€” Your Cute Assistant ðŸ’™</div>")
        user_id_state = gr.State(value=None)  # Pastikan inisialisasi dengan None
        user_name_state = gr.State(value=None)  # Pastikan inisialisasi dengan None
        chat_state = gr.State(value={})  # Pastikan inisialisasi dengan dict kosong

        logger.info(f"Initial user_id_state: {user_id_state.value}")
        logger.info(f"Initial user_name_state: {user_name_state.value}")
        logger.info(f"Initial chat_state: {chat_state.value}")

        with gr.Tabs() as tabs:
            with gr.Tab("Welcome", id="Welcome") as welcome_tab:
                gr.Markdown("### Welcome to Kugy.ai!")
                gr.Markdown("Login with Google to save history & get daily bonuses, or try Guest Mode (temporary history).")
                with gr.Row():
                    gr.HTML('<a href="https://accounts.google.com/o/oauth2/v2/auth?client_id=385259735074-ui76jtbrq23idr9bk86gpbmpe06691nt.apps.googleusercontent.com&redirect_uri=https://backend-cb98.onrender.com/auth/callback&response_type=code&scope=profile email&state=xyz&access_type=offline&prompt=consent" class="oauth-link">ðŸš€ Login with Google</a>')
                    guest_button = gr.Button("ðŸ‘¤ Guest Mode", variant="secondary")
                welcome_message = gr.Textbox("", label="Status", interactive=False)

                def start_guest_mode(chat_history_state):
                    if not isinstance(chat_history_state, dict):
                        chat_history_state = {}
                    guest_id = f"guest_{int(time.time())}"
                    chat_history_state[guest_id] = []
                    conn = sqlite3.connect("credits.db")
                    c = conn.cursor()
                    c.execute("INSERT OR IGNORE INTO users (user_id, user_name, credits, login_streak, last_login, last_guest_timestamp, last_reward_date) VALUES (?, ?, ?, ?, ?, ?, ?)",
                              (guest_id, "Guest", 25, 0, datetime.now().strftime("%Y-%m-%d"), int(time.time()), ''))
                    conn.commit()
                    conn.close()
                    return guest_id, chat_history_state, f"Guest Mode ({guest_id}) active! You have 25 free credits.", gr.update(selected="Chat")

                guest_button.click(
                    fn=start_guest_mode,
                    inputs=[chat_state],
                    outputs=[user_id_state, chat_state, welcome_message, tabs]
                )

                with gr.Row():
                    code_input = gr.Textbox(placeholder="Paste the 'code' from URL", label="Code")
                    state_input = gr.Textbox(placeholder="Paste the 'state' from URL (should be 'xyz')", label="State")
                    callback_btn = gr.Button("Submit Callback")

                callback_btn.click(
                    fn=handle_google_callback,
                    inputs=[code_input, state_input],
                    outputs=[user_id_state, user_name_state, welcome_message, tabs]
                )

            with gr.Tab("Chat", id="Chat") as chat_tab:
                with gr.Row():
                    credit_display = gr.Textbox("Credit: 0 ðŸ’°", interactive=False, elem_classes=["credit-display"], label="Credits")
                chatbot = gr.Chatbot(label="", height=500)
                with gr.Row():
                    model_dropdown = gr.Dropdown(
                        ["OpenRouter (Grok 3 Mini Beta)", "OpenRouter (Gemini 2.0 Flash)"],
                        value="OpenRouter (Grok 3 Mini Beta)",  # Default ke Grok 3 Mini Beta
                        label="Choose AI Model"
                    )
                    textbox = gr.Textbox(placeholder="Type your message...", label="")
                    send_btn = gr.Button("Send", variant="primary")
                    clear_btn = gr.Button("Reset Chatbot", variant="secondary")
                    image_btn = gr.Button("Generate Image", variant="secondary")

                def load_chat_data(user_id, chat_history_state):
                    logger.info(f"Loading chat data for user_id: {user_id}, chat_state: {chat_history_state}")
                    if not user_id:
                        return "Credit: 0 ðŸ’°", [], chat_history_state
                    if not isinstance(chat_history_state, dict):
                        chat_history_state = {}
                    credits = get_credits(user_id)
                    history = chat_history_state.get(user_id, [])
                    if not history:
                        history = [("ðŸ¤– Hi bro! How can I help?", None)]
                        chat_history_state[user_id] = history
                    return f"Credit: {credits} ðŸ’°", history, chat_history_state

                chat_tab.select(
                    fn=load_chat_data,
                    inputs=[user_id_state, chat_state],
                    outputs=[credit_display, chatbot, chat_state]
                )

                def chat(message, history, user_id, chat_history_state, model_select):
                    logger.info(f"Chat input - message: {message}, user_id: {user_id}, model_select: {model_select}")
                    if not isinstance(history, list):
                        history = []
                    updated_history = chat_with_openrouter(message, history, user_id, model_select)
                    if not isinstance(updated_history, list):
                        updated_history = history
                    chat_history_state[user_id] = updated_history
                    return updated_history, chat_history_state

                send_btn.click(fn=chat, inputs=[textbox, chatbot, user_id_state, chat_state, model_dropdown], outputs=[chatbot, chat_state])
                textbox.submit(fn=chat, inputs=[textbox, chatbot, user_id_state, chat_state, model_dropdown], outputs=[chatbot, chat_state])

                def generate_image_action(prompt, history, user_id, chat_history_state):
                    logger.info(f"Generate image - prompt: {prompt}, user_id: {user_id}")
                    if not isinstance(history, list):
                        history = []
                    image, message = generate_image(prompt, user_id)
                    if image:
                        history.append((message, image))
                    else:
                        history.append((message, None))
                    chat_history_state[user_id] = history
                    return history, chat_history_state

                image_btn.click(
                    fn=generate_image_action,
                    inputs=[textbox, chatbot, user_id_state, chat_state],
                    outputs=[chatbot, chat_state]
                )

                def clear_chat(user_id, chat_history_state):
                    logger.info(f"Clearing chat for user_id: {user_id}")
                    if not isinstance(chat_history_state, dict):
                        chat_history_state = {}
                    chat_history_state[user_id] = [("ðŸ¤– Chat cleared! What's next?", None)]
                    return chat_history_state[user_id], chat_history_state

                clear_btn.click(fn=clear_chat, inputs=[user_id_state, chat_state], outputs=[chatbot, chat_state])

            with gr.Tab("Debug", id="Debug"):
                debug_output = gr.Textbox(label="Debug Info", interactive=False)

                def get_debug_info():
                    debug_info = (
                        f"Python Version: {sys.version}\n"
                        f"Gradio Version: {gr.__version__}\n"
                        f"GOOGLE_CLIENT_ID: {'[Value Hidden]' if os.getenv('GOOGLE_CLIENT_ID') else 'Not found'}\n"
                        f"GOOGLE_CLIENT_SECRET: {'[Value Hidden]' if os.getenv('GOOGLE_CLIENT_SECRET') else 'Not found'}\n"
                        f"STABILITY_API_KEY: {stability_status}\n"
                        f"OPENROUTER_API_KEY: {openrouter_status}\n"
                        f"Environment Variables (Direct Test):\n"
                        f"STABILITY_API_KEY (raw): {'[Value Hidden]' if os.getenv('STABILITY_API_KEY') else 'Not found'}\n"
                        f"OPENROUTER_API_KEY (raw): {'[Value Hidden]' if os.getenv('OPENROUTER_API_KEY') else 'Not found'}\n"
                        f"All Environment Variables with 'API_KEY':\n"
                    )
                    for key, value in os.environ.items():
                        if "API_KEY" in key:
                            debug_info += f"{key}: {'[Value Hidden]' if value else 'Not set'}\n"
                    return debug_info

                debug_btn = gr.Button("Check API Keys")
                debug_btn.click(fn=get_debug_info, inputs=[], outputs=[debug_output])

        def check_initial_login(user_id_state, user_name_state, chat_history_state):
            logger.info(f"Checking initial login - user_id_state: {user_id_state.value}, user_name_state: {user_name_state.value}, chat_state: {chat_history_state.value}")
            if user_id_state.value:
                streak_msg = check_login_streak(user_id_state.value, user_name_state.value)
                return user_id_state.value, user_name_state.value, chat_history_state, f"Welcome back! {streak_msg}", gr.update(selected="Chat")
            return "", "", chat_history_state, "Please login or select guest mode.", gr.update(selected="Welcome")

        demo.load(
            fn=check_initial_login,
            inputs=[user_id_state, user_name_state, chat_state],
            outputs=[user_id_state, user_name_state, chat_state, welcome_message, tabs]
        )

    return demo

try:
    gradio_app = create_gradio_interface()
    app = gr.mount_gradio_app(app, gradio_app, path="/")
except Exception as e:
    logger.error(f"Failed to mount Gradio app: {str(e)}")
    raise

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 7860))
    logger.info(f"Starting server on port: {port}")
    uvicorn.run(app, host="0.0.0.0", port=port)